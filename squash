#!/bin/sh

if [ "$(which mksquashfs)" == "" ] ; then
	echo "Cannot find mksquashfs - do you have squashfs tools installed?" >&2
	exit 2
fi

# for number $1, check if $1 is in [$2, $3]
in_range() {
	[ $1 -ge $2 ] && [ $1 -le $3 ]
}

# $1 - example text
usage() {
	echo "Usage:" >&2 && echo "	$1" >&2 && exit 1
}

# $@ - messages
die() {
	echo "$@" >&2
	exit 1
}

MAXARGS=10000
case $1 in
	info)
		in_range $# 2 $MAXARGS || usage "squash info app1.squash app2.squash ..." 
		shift 1
		for arg in $@ ; do
			$arg --squash-boot fs
		done
	;;
	list)
		in_range $# 1 2 || usage "squash list [<grep pattern>]" 
		ls ~/.squash-apps | tr ' ' '\n' |
			if [ "$2" != "" ] ; then 
				grep "$2"
			else
				cat
			fi
	;;
	install)
		echo "Not implemented yet" >&2
	;;
	pack)
		shift 1
		DIR="$1"
		APP="$DIR.squash"
		BOOT="boot.sh"
		FS="/tmp/$NAME.fs"
		[ -d $1 ] || die "squash pack: $1 is not a directory"
		if [ -f "$APP" ] ; then
			echo -n "Overwrite $APP ? (Y/n):"
			read ans 
			[ "$ans" != "Y" ] && [ "$ans" != "y" ] && [ "$ans" != "" ] && die "squash pack: stopped, $APP is intact"
			unlink "$FS" || die "squash pack: failed to remove $APP"
		fi
		echo mksquashfs "$DIR" "$FS"
		mksquashfs "$DIR" "$FS" || die "couldn't produce squashfs image"
		"./$BOOT" --squash-boot pad > "$APP" || die "failed to create padded bootloader script from $BOOT file"
		cat "$FS" >> "$APP" && chmod +x "$APP" || die "failed to combine squash app image"
	;;
	unpack)
		shift 1		
	;;
	*)
		if [ -f $1 ] ; then
			exec $0 run "$@"
		else
			echo "Usage:" >&2
			echo "	squashapp <run|ls|sign|verify|pack|unpack> [args...]" >&2
		fi
esac

